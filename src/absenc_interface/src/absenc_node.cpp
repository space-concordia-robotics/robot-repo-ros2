#include "absenc.h"
#include "math.h"
#include "rclcpp/rclcpp.hpp"
#include "std_msgs/msg/string.hpp"
#include <cmath>
#include <memory>
#include <chrono>
#include <array>
#include <cmath>
#include <string>
#include <limits>
/*Include autogenerated message header*/
// #include "arm_controller/msg/arm_motor_values.hpp"
#include <sensor_msgs/msg/joint_state.hpp>
#include <sensor_msgs/msg/joy.hpp>


  using namespace std::chrono_literals;
  #define GAIN 20.0

  float scaleClamp(float val, float scale, float min, float max) {
    val *= scale;
    val = val < min ? min : val;
    val = val > max ? max : val;
    return val;
  }

  Absenc::Absenc() : rclcpp::Node("absenc_node") {
    // Declare parameters
    this->declare_parameter("absenc_path", "/dev/ttyUSB0");
    this->declare_parameter("absenc_polling_rate", 100);

   

    // Initialize publisher
    angles_publisher_ = this->create_publisher<sensor_msgs::msg::JointState>("/joint_states", 10);

    // Initialize timer for polling
    timer_ = this->create_wall_timer(
        std::chrono::milliseconds(this->get_parameter("absenc_polling_rate").as_int()),
        std::bind(&Absenc::absEncPollingCallback, this)
    );



    // Open serial connection
    ABSENC_Error_t err = AbsencDriver::OpenPort(this->get_parameter("absenc_path").as_string().c_str(), s_fd);
    if (err.error != 0) {
        RCLCPP_ERROR(this->get_logger(), "Error opening file: %i. Message: %s", err.error, strerror(err.error));
        rclcpp::shutdown();
    } else {
        RCLCPP_INFO(this->get_logger(), "Successfully opened serial connection to %s", absenc_path_.c_str());
    }
  }

  Absenc::~Absenc() {
    if (s_fd >= 0) {
      AbsencDriver::ClosePort(s_fd);
    }
  }

void Absenc::absEncPollingCallback() {
    ABSENC_Meas_t absenc_meas_1, absenc_meas_2, absenc_meas_3, absenc_meas_4;

    ABSENC_Error_t err1 = AbsencDriver::PollSlave(1, &absenc_meas_1, s_fd);
    ABSENC_Error_t err2 = AbsencDriver::PollSlave(2, &absenc_meas_2, s_fd);
    ABSENC_Error_t err3 = AbsencDriver::PollSlave(3, &absenc_meas_3, s_fd);
    ABSENC_Error_t err4 = AbsencDriver::PollSlave(4, &absenc_meas_4, s_fd);

    if (err1.error != NO_ERROR) {
        RCLCPP_ERROR(this->get_logger(), "Error on 1: %s cause %d line %d\n", strAbsencErr(err1.error), err1.cause, err1.line);
    }
    if (err2.error != NO_ERROR) {
        RCLCPP_ERROR(this->get_logger(), "Error on 2: %s cause %d line %d\n", strAbsencErr(err2.error), err2.cause, err2.line);
    }
    if (err3.error != NO_ERROR) {
        RCLCPP_ERROR(this->get_logger(), "Error on 3: %s cause %d line %d\n", strAbsencErr(err3.error), err3.cause, err3.line);
    }
    if (err4.error != NO_ERROR) {
        RCLCPP_ERROR(this->get_logger(), "Error on 4: %s cause %d line %d\n", strAbsencErr(err4.error), err4.cause, err4.line);
    }

    if (absenc_meas_1.status != 0 || absenc_meas_2.status != 0 || absenc_meas_3.status != 0 || absenc_meas_4.status != 0) {
        RCLCPP_ERROR(this->get_logger(),
            "One of the absenc status returned an error. Here are the error codes: %d %d %d %d\n",
            absenc_meas_1.status, absenc_meas_2.status, absenc_meas_3.status, absenc_meas_4.status);
        //return;
    }


    // Fix the Home
    float angle_1 = absenc_meas_1.angval + 25; //-355
    float angle_2 = absenc_meas_2.angval - 174; //-175
    float angle_3 = absenc_meas_3.angval * -1; 
    float angle_4 = absenc_meas_4.angval / 4.0f;

    // Normalize angles to range [-180, 180) rn it's 0 to 360
    //////////////////////////////////////////////////
    angle_1 = angle_1 < 180 ? angle_1 : angle_1 - 360;
    angle_2 = angle_2 > -180 ? angle_2 : angle_2 + 360; 
    
    
    //////////////////////////////////////////////////
    // fixing 1 to 4 ratio of angle 4

    // Finding the zone of the angle 4
    if(old_angle_4 - angle_4 > 70 ) {
        this -> angle_4_zone = (this -> angle_4_zone + 1) % 4;
    }

    if(old_angle_4 - angle_4 < -70 ) {
      this -> angle_4_zone = (this -> angle_4_zone - 1) % 4;
    }


    // update the old angle
    this -> old_angle_4 = angle_4;
    
    angle_4 = angle_4 + this -> angle_4_zone * 90 - 30;
    /////////////////////////////////////////////////

    // Publish angles
    auto joint_state_msg = sensor_msgs::msg::JointState();
    joint_state_msg.header.stamp = this->now();
    joint_state_msg.name = {"base", "shoulder", "bicep", "wrist"};
    joint_state_msg.position = {absenc_meas_4.angval, absenc_meas_1.angval, absenc_meas_2.angval, absenc_meas_3.angval};

    angles_publisher_->publish(joint_state_msg);

    // Print angles to the terminal
    RCLCPP_INFO(this->get_logger(), "Angles: [%f, %f, %f, %f]",angle_4, angle_1, angle_2, angle_3);
}



int main(int argc, char * argv[])
{
  std::cout << "Starting absenc node\n";
  rclcpp::init(argc, argv);
  rclcpp::executors::SingleThreadedExecutor exe;

  std::shared_ptr<Absenc> abs_node = std::make_shared<Absenc>();

  exe.add_node(abs_node->get_node_base_interface());
  exe.spin();

  rclcpp::shutdown();
  return 0;
}
